
document.addEventListener('DOMContentLoaded', () => {
    // --- SHARED APP LOGIC ---
    const App = {
        adminEmail: 'imirfan7738t@gmail.com',
        adminPass: 'admin123',
        // All data is stored in localStorage to persist across sessions
        getThreads: () => JSON.parse(localStorage.getItem('threads')) || [],
        saveThreads: (threads) => localStorage.setItem('threads', JSON.stringify(threads)),
        getUsers: () => JSON.parse(localStorage.getItem('users')) || [],
        saveUsers: (users) => localStorage.setItem('users', JSON.stringify(users)),
        getMessages: () => JSON.parse(localStorage.getItem('messages')) || [],
        saveMessages: (messages) => localStorage.setItem('messages', JSON.stringify(messages)),
        getCurrentUser: () => sessionStorage.getItem('currentUser'),
        setCurrentUser: (email) => sessionStorage.setItem('currentUser', email),
        logoutUser: () => sessionStorage.removeItem('currentUser'),
    };

    // --- ADMIN PROFILE DATA ---
    const adminProfile = {
        name: "M Irfan",
        username: "@website_developer06",
        bio: "Full-Stack Developer specializing in scalable web/mobile apps. Turning complex problems into elegant solutions.",
        skills: ["React", "Node.js", "Python", "iOS Dev", "Android Dev", "UI/UX"],
    };

    // --- PUBLIC THREAD FEED LOGIC (index.html) ---
    const threadsContainer = document.getElementById('threads-container');
    if (threadsContainer) {
        const renderThreads = () => {
            threadsContainer.innerHTML = '';
            const threads = App.getThreads();
            threads.forEach((thread, index) => {
                const threadCard = document.createElement('div');
                threadCard.className = 'thread-card glass-card';
                
                // Construct the HTML for the thread card
                let commentsHTML = '';
                thread.comments.forEach(comment => {
                    commentsHTML += `<div class="comment">${comment}</div>`;
                });

                threadCard.innerHTML = `
                    <img src="${thread.image}" alt="Thread image">
                    <div class="thread-content">
                        <p>${thread.caption}</p>
                        <div class="thread-actions">
                            <span class="like-btn ${thread.liked ? 'liked' : ''}" data-index="${index}"><i class="fas fa-heart"></i> ${thread.likes}</span>
                        </div>
                        <div class="comments-section">
                            <h4>Comments</h4>
                            <div class="comments-list">${commentsHTML}</div>
                            <form class="comment-form" data-index="${index}">
                                <input type="text" placeholder="Add a comment..." required>
                                <button type="submit" class="cta-button">Post</button>
                            </form>
                        </div>
                    </div>`;
                threadsContainer.appendChild(threadCard);
            });
        };

        // Event delegation for likes and comments
        threadsContainer.addEventListener('click', e => {
            if (e.target.closest('.like-btn')) {
                const index = e.target.closest('.like-btn').dataset.index;
                let threads = App.getThreads();
                // Simple toggle for like state
                threads[index].likes += threads[index].liked ? -1 : 1;
                threads[index].liked = !threads[index].liked;
                App.saveThreads(threads);
                renderThreads();
            }
        });
        
        threadsContainer.addEventListener('submit', e => {
            if(e.target.classList.contains('comment-form')) {
                e.preventDefault();
                const index = e.target.dataset.index;
                const commentInput = e.target.querySelector('input');
                let threads = App.getThreads();
                threads[index].comments.push(commentInput.value);
                App.saveThreads(threads);
                commentInput.value = '';
                renderThreads();
            }
        });

        renderThreads();
    }

    // --- MY PROFILE PAGE LOGIC (my_profile.html) ---
    if (document.body.classList.contains('profile-page-body')) {
        document.getElementById('profile-name').textContent = adminProfile.name;
        document.getElementById('profile-username').textContent = adminProfile.username;
        document.getElementById('profile-bio').textContent = adminProfile.bio;
        const skillsContainer = document.getElementById('profile-skills');
        adminProfile.skills.forEach(skill => {
            const badge = document.createElement('span');
            badge.className = 'skill-badge';
            badge.textContent = skill;
            skillsContainer.appendChild(badge);
        });
    }

    // --- USER AUTH LOGIC (auth.html) ---
    const loginForm = document.getElementById('login-form');
    if (loginForm) {
        const signupForm = document.getElementById('signup-form');
        const showSignupBtn = document.getElementById('show-signup');
        const showLoginBtn = document.getElementById('show-login');

        showSignupBtn.addEventListener('click', e => { e.preventDefault(); loginForm.classList.remove('active'); signupForm.classList.add('active'); });
        showLoginBtn.addEventListener('click', e => { e.preventDefault(); signupForm.classList.remove('active'); loginForm.classList.add('active'); });

        signupForm.addEventListener('submit', e => {
            e.preventDefault();
            const email = signupForm.querySelector('input[type="email"]').value;
            const password = signupForm.querySelector('input[type="password"]').value;
            const users = App.getUsers();
            if (users.find(user => user.email === email)) {
                signupForm.querySelector('.error-message').textContent = 'Email already exists.';
                return;
            }
            users.push({ email, password });
            App.saveUsers(users);
            App.setCurrentUser(email);
            window.location.href = 'dashboard.html';
        });
        
        loginForm.addEventListener('submit', e => {
            e.preventDefault();
            const email = loginForm.querySelector('input[type="email"]').value;
            const password = loginForm.querySelector('input[type="password"]').value;
            const users = App.getUsers();
            const user = users.find(u => u.email === email && u.password === password);
            if (user) {
                App.setCurrentUser(email);
                window.location.href = 'dashboard.html';
            } else {
                loginForm.querySelector('.error-message').textContent = 'Invalid credentials.';
            }
        });
    }

    // --- USER DASHBOARD LOGIC (dashboard.html) ---
    const userDashboard = document.getElementById('dashboard-body');
    if (userDashboard) {
        const currentUser = App.getCurrentUser();
        if (!currentUser) { window.location.href = 'auth.html'; return; }
        
        document.getElementById('user-email-display').textContent = `Logged in as: ${currentUser}`;
        document.getElementById('message-form').addEventListener('submit', e => {
            e.preventDefault();
            const text = document.getElementById('message-text').value;
            const messages = App.getMessages();
            messages.push({ from: currentUser, text: text, date: new Date().toLocaleString() });
            App.saveMessages(messages);
            document.getElementById('message-success').textContent = "Your message has been sent!";
            document.getElementById('message-text').value = '';
        });
        document.getElementById('logout-btn').addEventListener('click', () => { App.logoutUser(); window.location.href = 'index.html'; });
    }

    // --- ADMIN LOGIN LOGIC ---
    const adminLoginForm = document.getElementById('admin-login-form');
    if (adminLoginForm) {
        adminLoginForm.addEventListener('submit', e => {
            e.preventDefault();
            if (adminLoginForm.querySelector('#admin-email').value === App.adminEmail && adminLoginForm.querySelector('#admin-password').value === App.adminPass) {
                sessionStorage.setItem('isAdmin', 'true');
                window.location.href = 'admin_dashboard.html';
            } else {
                adminLoginForm.querySelector('.error-message').textContent = 'Invalid admin credentials.';
            }
        });
    }

    // --- ADMIN DASHBOARD LOGIC ---
    const adminDashboard = document.getElementById('admin-dashboard-body');
    if (adminDashboard) {
        if (sessionStorage.getItem('isAdmin') !== 'true') { window.location.href = 'admin_login.html'; return; }
        
        const messageInbox = document.getElementById('message-inbox');
        const threadForm = document.getElementById('thread-form');

        // Display messages
        App.getMessages().forEach(msg => {
            const msgCard = document.createElement('div');
            msgCard.className = 'message-card';
            msgCard.innerHTML = `<strong>From: ${msg.from}</strong><p>${msg.text}</p><small>${msg.date}</small>`;
            messageInbox.appendChild(msgCard);
        });

        // Handle thread creation
        threadForm.addEventListener('submit', e => {
            e.preventDefault();
            const threads = App.getThreads();
            threads.unshift({ // Add to the beginning of the array
                image: document.getElementById('thread-image').value,
                caption: document.getElementById('thread-caption').value,
                likes: 0,
                liked: false,
                comments: []
            });
            App.saveThreads(threads);
            threadForm.reset();
            alert('New thread has been posted to the main page!');
        });
        
        document.getElementById('logout-btn').addEventListener('click', () => { sessionStorage.removeItem('isAdmin'); window.location.href = 'index.html'; });
    }
});

